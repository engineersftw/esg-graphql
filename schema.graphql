type User {
  uid: ID
  email: String!
  full_name: String
}

type Organization {
  uid: ID
  slug: String
  title: String!
  description: String
  website: String
  twitter: String
  contact_person: String
  active: Boolean
  image: String
  presentations(first: Int, after: String, last: Int, before: String): PresentationConnection
}

type Presentation {
  uid: ID
  slug: String
  title: String!
  description: String
  video_id: String
  video_source: String
  view_count: Int
  published_at: DateTime
  thumbnail1: String
  thumbnail2: String
  thumbnail3: String
  published: Boolean
  organizations: [Organization]
  presenters: [Presenter]
  links: [PresentationLink]
}

type PresentationLink {
  uid: ID
  title: String!
  url: String!
  active: Boolean
}

type Presenter {
  uid: ID
  slug: String
  user: User!
  byline: String!
  biography: String
  twitter: String
  github: String
  website: String
  avatar_url: String
  active: Boolean
  presentations(first: Int, after: String, last: Int, before: String): PresentationConnection
}

enum PlaylistCategory {
  CONFERENCE
  MEETUP
  TUTORIAL
  TRAINING
  SHOWS
  CONFERENCE_TRACK
}

type Playlist {
  uid: ID
  slug: String
  category: PlaylistCategory
  name: String
  description: String
  website: String
  publish_at: DateTime
  playlist_id: String
  playlist_source: String
  thumbnail: String
  active: Boolean
  presentations(first: Int, after: String, last: Int, before: String): PresentationConnection
}

type Event {
  uid: ID
  title: String
  description: String
  event_datetime: DateTime
  venue: String
  source: String
  source_uid: String
  rsvp_count: Int
  location_lat: String
  location_long: String
  is_recorded: Boolean
  is_scheduled_for_recording: Boolean
  active: Boolean
  organizations: [Organization]
  presentations(first: Int, after: String, last: Int, before: String): PresentationConnection
}

scalar DateTime

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type OrganizationEdge {
  cursor: String!
  node: Organization
}

type OrganizationConnection {
  edges: [OrganizationEdge]
  nodes: [Organization]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PresenterEdge {
  cursor: String!
  node: Presenter
}

type PresenterConnection {
  edges: [PresenterEdge]
  nodes: [Presenter]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PresentationEdge {
  cursor: String!
  node: Presentation
}

type PresentationConnection {
  edges: [PresentationEdge]
  nodes: [Presentation]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PlaylistEdge {
  cursor: String!
  node: Playlist
}

type PlaylistConnection {
  edges: [PlaylistEdge]
  nodes: [Playlist]
  pageInfo: PageInfo!
  totalCount: Int!
}

type EventEdge {
  cursor: String!
  node: Event
}

type EventConnection {
  edges: [EventEdge]
  nodes: [Event]
  pageInfo: PageInfo!
  totalCount: Int!
}

type Query {
  organization(slug: String!): Organization
  organizations(first: Int, after: String, last: Int, before: String): OrganizationConnection
  presenter(slug: String!): Presenter
  presenters(first: Int, after: String, last: Int, before: String): PresenterConnection
  presentation(slug: String!): Presentation
  presentations(first: Int, after: String, last: Int, before: String): PresentationConnection
  playList(slug: String!): Playlist
  playLists(first: Int, after: String, last: Int, before: String, category: PlaylistCategory): PlaylistConnection
  event(uid: ID!): Event
  events(first: Int, after: String, last: Int, before: String): EventConnection
}
